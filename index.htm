<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MSCSLM-proto-sajilosathi</title>
    <link rel="stylesheet" href="style.css"> </head>
<body>
    <header id="header">
        <h1>Welcome to MSCSLM (prototype-sajilosathi)</h1>
        <p>type info to know more </p>
    </header>

    <div id="chat-container">
        <div id="chat-messages"></div>
        <input type="text" id="user-input" placeholder="Ask me anything...">
    </div>

    

    <script>
        // Function to add a message to the chat container
        function addMessage(message, isUser = false) {
            const chatMessages = document.getElementById('chat-messages');
            const messageDiv = document.createElement('div');
            messageDiv.className = isUser ? 'user-message' : 'bot-message';
            messageDiv.textContent = message;
            chatMessages.appendChild(messageDiv);

            // Scroll to the bottom of the chat container
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        let responses; // Declare responses variable in the outer scope

        // Function to handle user input and trigger search
        function sendMessage(event) {
            if (event.key === 'Enter') {
                const userInput = document.getElementById('user-input');
                const userMessage = userInput.value.trim();
                userInput.value = '';

                const topSimilarQueries = search(userMessage);

                addMessage(`User query: ${userMessage.toUpperCase()}`, true);

                setTimeout(() => {
                    topSimilarQueries.forEach((similarQuery) => {
                        addMessage(`Query: ${similarQuery.query} - Response: ${responses[similarQuery.query]}`);
                    });
                }, 500);
            }
        }

        // Event listener for user input
        document.getElementById('user-input').addEventListener('keypress', sendMessage);

        // Fetch responses from responses.json file
        fetch('responses.json')
            .then(response => response.json())
            .then(data => {
                responses = data; // Assign the fetched responses to the 'responses' variable
            })
            .catch(error => console.error('Error fetching responses:', error));

        const ignoreWords = ["what", "IS", "THE", "WHO", "NEPAL'S", "streets", "metropolitan", 'mom', 'i', 'I', 'saw', 'his', 'ward', 'no'];
        const spellingMistakes = {
            'kid': 'child',
            'scammed': 'scam',
            'scamed': 'scam',
            'father': 'elder',
            'beating': 'abuse',
            'beat': "abuse",
            //'wrorking': 'labour',
            'mother': 'elder',
            'abusing': "abuse",
        };

        function normalizeInput(input) {
            return input.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()]/g, ' ').toLowerCase();
        }

        function correctSpelling(query) {
            const words = query.split(' ');

            for (let i = 0; i < words.length; i++) {
                const word = words[i].toLowerCase();
                if (spellingMistakes[word]) {
                    words[i] = spellingMistakes[word];
                }
            }

            return words.join(' ');
        }

        function calculateSimilarity(str1, str2) {
            const words1 = str1.split(' ').filter(word => !ignoreWords.includes(word));
            const words2 = str2.split(' ').filter(word => !ignoreWords.includes(word));

            const commonWords = words1.filter(word => words2.includes(word)).length;
            const similarityWords = (commonWords / Math.max(words1.length, words2.length)) * 100;

            const sequenceSimilarity = calculateSequenceSimilarity(str1, str2);
            const lengthDifference = calculateLengthDifference(str1, str2);
            const firstLetterMatch = calculateFirstLetterMatch(str1, str2);
            const lastLetterMatch = calculateLastLetterMatch(str1, str2);

            const totalSimilarity = (
                (similarityWords * 0.45) +         
                (sequenceSimilarity * 0.39) +      
                (lengthDifference * 0.01) +         
                (firstLetterMatch * 0.05) +       
                (lastLetterMatch * 0.10)          
            );

            return totalSimilarity;
        }

        function calculateSequenceSimilarity(str1, str2) {
            const maxLength = Math.max(str1.length, str2.length);
            let sequenceSimilarity = 0;

            for (let i = 0; i < maxLength; i++) {
                if (str1[i] === str2[i]) {
                    sequenceSimilarity += 1 / maxLength; // Increment based on matching letters in sequence
                }
            }

            return sequenceSimilarity * 100; // Convert to percentage
        }

        function calculateLengthDifference(str1, str2) {
            const lengthDiff = Math.abs(str1.length - str2.length);
            return 100 - (lengthDiff * 3); // Higher similarity for smaller differences in length
        }

        function calculateFirstLetterMatch(str1, str2) {
            return (str1.charAt(0) === str2.charAt(0)) ? 100 : 0; // Full match of first letter gives 100 similarity
        }

        function calculateLastLetterMatch(str1, str2) {
            return (str1.charAt(str1.length - 1) === str2.charAt(str2.length - 1)) ? 100 : 0; // Full match of last letter gives 100 similarity
        }

        function search(query) {
            let similarQueries = [];

            const correctedUserMessage = correctSpelling(query);
            const userMessage = normalizeInput(correctedUserMessage.trim().toUpperCase());

            for (const predefinedQuery in responses) {
                const similarity = calculateSimilarity(userMessage, normalizeInput(predefinedQuery.toUpperCase()));
                similarQueries.push({ query: predefinedQuery, similarity: similarity });
            }

            similarQueries.sort((a, b) => b.similarity - a.similarity); // Sort by similarity, descending

            const topSimilarQueries = similarQueries.slice(0, 1); // Retrieve top n similar queries,here n=1

            return topSimilarQueries;
        }
    </script>
</body>
</html>
